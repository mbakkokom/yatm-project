{"version":3,"file":"dexie-observable.es.js","sources":["../src/utils.js","../src/override-create-transaction.js","../src/wakeup-observers.js","../src/change_types.js","../src/hooks/creating.js","../src/hooks/updating.js","../src/hooks/deleting.js","../src/hooks/crud-monitor.js","../src/on-storage.js","../src/override-open.js","../src/intercomm.js","../src/override-parse-stores-spec.js","../src/delete-old-changes.js","../src/Dexie.Observable.js"],"sourcesContent":["export function nop() {}\r\n\r\nexport function promisableChain(f1, f2) {\r\n  if (f1 === nop) return f2;\r\n  return function() {\r\n    var res = f1.apply(this, arguments);\r\n    if (res && typeof res.then === 'function') {\r\n      var thiz = this, args = arguments;\r\n      return res.then(function() {\r\n        return f2.apply(thiz, args);\r\n      });\r\n    }\r\n    return f2.apply(this, arguments);\r\n  };\r\n}\r\n\r\nexport function createUUID() {\r\n  // Decent solution from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\r\n  var d = Date.now();\r\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = (d + Math.random() * 16) % 16 | 0;\r\n    d = Math.floor(d / 16);\r\n    return (c === 'x' ? r : (r & 0x7 | 0x8)).toString(16);\r\n  });\r\n  return uuid;\r\n}\r\n","export default function initOverrideCreateTransaction(db, wakeupObservers) {\r\n  return function overrideCreateTransaction(origFunc) {\r\n    return function (mode, storenames, dbschema, parent) {\r\n      if (db.dynamicallyOpened()) return origFunc.apply(this, arguments); // Don't observe dynamically opened databases.\r\n      var addChanges = false;\r\n      if (mode === 'readwrite' && storenames.some(function (storeName) {\r\n            return dbschema[storeName] && dbschema[storeName].observable;\r\n          })) {\r\n        // At least one included store is a observable store. Make sure to also include the _changes store.\r\n        addChanges = true;\r\n        storenames = storenames.slice(0); // Clone\r\n        if (storenames.indexOf(\"_changes\") === -1)\r\n          storenames.push(\"_changes\"); // Otherwise, firefox will hang... (I've reported the bug to Mozilla@Bugzilla)\r\n      }\r\n      // Call original db._createTransaction()\r\n      var trans = origFunc.call(this, mode, storenames, dbschema, parent);\r\n      // If this transaction is bound to any observable table, make sure to add changes when transaction completes.\r\n      if (addChanges) {\r\n        trans._lastWrittenRevision = 0;\r\n        trans.on('complete', function () {\r\n          if (trans._lastWrittenRevision) {\r\n            // Changes were written in this transaction.\r\n            if (!parent) {\r\n              // This is root-level transaction, i.e. a physical commit has happened.\r\n              // Delay-trigger a wakeup call:\r\n              if (wakeupObservers.timeoutHandle) clearTimeout(wakeupObservers.timeoutHandle);\r\n              wakeupObservers.timeoutHandle = setTimeout(function () {\r\n                delete wakeupObservers.timeoutHandle;\r\n                wakeupObservers(trans._lastWrittenRevision);\r\n              }, 25);\r\n            } else {\r\n              // This is just a virtual commit of a sub transaction.\r\n              // Wait with waking up observers until root transaction has committed.\r\n              // Make sure to mark root transaction so that it will wakeup observers upon commit.\r\n              var rootTransaction = (function findRootTransaction(trans) {\r\n                return trans.parent ? findRootTransaction(trans.parent) : trans;\r\n              })(parent);\r\n              rootTransaction._lastWrittenRevision = Math.max(\r\n                  trans._lastWrittenRevision,\r\n                  rootTransaction.lastWrittenRevision || 0);\r\n            }\r\n          }\r\n        });\r\n        // Derive \"source\" property from parent transaction by default\r\n        if (trans.parent && trans.parent.source) trans.source = trans.parent.source;\r\n      }\r\n      return trans;\r\n    };\r\n  };\r\n}\r\n","import Dexie from 'dexie';\r\n\r\nexport default function initWakeupObservers(db, Observable, localStorage) {\r\n  return function wakeupObservers(lastWrittenRevision) {\r\n    // Make sure Observable.latestRevision[db.name] is still below our value, now when some time has elapsed and other db instances in same window possibly could have made changes too.\r\n    if (Observable.latestRevision[db.name] < lastWrittenRevision) {\r\n      // Set the static property lastRevision[db.name] to the revision of the last written change.\r\n      Observable.latestRevision[db.name] = lastWrittenRevision;\r\n      // Wakeup ourselves, and any other db instances on this window:\r\n      Dexie.ignoreTransaction(function () {\r\n        Observable.on('latestRevisionIncremented').fire(db.name, lastWrittenRevision);\r\n      });\r\n      // Observable.on.latestRevisionIncremented will only wakeup db's in current window.\r\n      // We need a storage event to wakeup other windwos.\r\n      // Since indexedDB lacks storage events, let's use the storage event from WebStorage just for\r\n      // the purpose to wakeup db instances in other windows.\r\n      if (localStorage) localStorage.setItem('Dexie.Observable/latestRevision/' + db.name, lastWrittenRevision); // In IE, this will also wakeup our own window. However, onLatestRevisionIncremented will work around this by only running once per revision id.\r\n    }\r\n  };\r\n}\r\n","// Change Types\r\nexport const CREATE = 1;\r\nexport const UPDATE = 2;\r\nexport const DELETE = 3;\r\n","import Dexie from 'dexie';\r\n\r\nimport {CREATE} from '../change_types';\r\nimport {createUUID} from '../utils';\r\n\r\nexport default function initCreatingHook(db, table) {\r\n  return function creatingHook(primKey, obj, trans) {\r\n    /// <param name=\"trans\" type=\"db.Transaction\"></param>\r\n    var rv = undefined;\r\n    if (primKey === undefined && table.schema.primKey.uuid) {\r\n      primKey = rv = createUUID();\r\n      if (table.schema.primKey.keyPath) {\r\n        Dexie.setByKeyPath(obj, table.schema.primKey.keyPath, primKey);\r\n      }\r\n    }\r\n\r\n    var change = {\r\n      source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\r\n      table: table.name,\r\n      key: primKey === undefined ? null : primKey,\r\n      type: CREATE,\r\n      obj: obj\r\n    };\r\n\r\n    var promise = db._changes.add(change).then(function (rev) {\r\n      trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\r\n      return rev;\r\n    });\r\n\r\n    // Wait for onsuccess so that we have the primKey if it is auto-incremented and update the change item if so.\r\n    this.onsuccess = function (resultKey) {\r\n      if (primKey != resultKey)\r\n        promise._then(function () {\r\n          change.key = resultKey;\r\n          db._changes.put(change);\r\n        });\r\n    };\r\n\r\n    this.onerror = function () {\r\n      // If the main operation fails, make sure to regret the change\r\n      promise._then(function (rev) {\r\n        // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\r\n        db._changes.delete(rev);\r\n      });\r\n    };\r\n\r\n    return rv;\r\n  };\r\n}\r\n","import Dexie from 'dexie';\r\n\r\nimport {UPDATE} from '../change_types';\r\n\r\nexport default function initUpdatingHook(db, tableName) {\r\n  return function updatingHook(mods, primKey, oldObj, trans) {\r\n    /// <param name=\"trans\" type=\"db.Transaction\"></param>\r\n    // mods may contain property paths with undefined as value if the property\r\n    // is being deleted. Since we cannot persist undefined we need to act\r\n    // like those changes is setting the value to null instead.\r\n    var modsWithoutUndefined = {};\r\n    // As of current Dexie version (1.0.3) hook may be called even if it wouldn't really change.\r\n    // Therefore we may do that kind of optimization here - to not add change entries if\r\n    // there's nothing to change.\r\n    var anythingChanged = false;\r\n    var newObj = Dexie.deepClone(oldObj);\r\n    for (var propPath in mods) {\r\n      var mod = mods[propPath];\r\n      if (typeof mod === 'undefined') {\r\n        Dexie.delByKeyPath(newObj, propPath);\r\n        modsWithoutUndefined[propPath] = null; // Null is as close we could come to deleting a property when not allowing undefined.\r\n        anythingChanged = true;\r\n      } else {\r\n        var currentValue = Dexie.getByKeyPath(oldObj, propPath);\r\n        if (mod !== currentValue && JSON.stringify(mod) !== JSON.stringify(currentValue)) {\r\n          Dexie.setByKeyPath(newObj, propPath, mod);\r\n          modsWithoutUndefined[propPath] = mod;\r\n          anythingChanged = true;\r\n        }\r\n      }\r\n    }\r\n    if (anythingChanged) {\r\n      var change = {\r\n        source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\r\n        table: tableName,\r\n        key: primKey,\r\n        type: UPDATE,\r\n        mods: modsWithoutUndefined,\r\n        oldObj: oldObj,\r\n        obj: newObj\r\n      };\r\n      var promise = db._changes.add(change); // Just so we get the correct revision order of the update...\r\n      this.onsuccess = function () {\r\n        promise._then(function (rev) {\r\n          trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\r\n        });\r\n      };\r\n      this.onerror = function () {\r\n        // If the main operation fails, make sure to regret the change.\r\n        promise._then(function (rev) {\r\n          // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\r\n          db._changes.delete(rev);\r\n        });\r\n      };\r\n    }\r\n  };\r\n}\r\n","import {DELETE} from '../change_types';\r\n\r\nexport default function initDeletingHook(db, tableName) {\r\n  return function deletingHook(primKey, obj, trans) {\r\n    /// <param name=\"trans\" type=\"db.Transaction\"></param>\r\n    var promise = db._changes.add({\r\n      source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\r\n      table: tableName,\r\n      key: primKey,\r\n      type: DELETE,\r\n      oldObj: obj\r\n    }).then(function (rev) {\r\n      trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\r\n      return rev;\r\n    })\r\n        .catch((e) => {\r\n          console.log(obj)\r\n          console.log(e.stack)\r\n        })\r\n    this.onerror = function () {\r\n      // If the main operation fails, make sure to regret the change.\r\n      // Using _then because if promise is already fullfilled, the standard then() would\r\n      // do setTimeout() and we would loose the transaction.\r\n      promise._then(function (rev) {\r\n        // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\r\n        db._changes.delete(rev);\r\n      });\r\n    };\r\n  };\r\n}\r\n","import initCreatingHook from './creating';\r\nimport initUpdatingHook from './updating';\r\nimport initDeletingHook from './deleting';\r\n\r\nexport default function initCrudMonitor(db) {\r\n//\r\n// The Creating/Updating/Deleting hook will make sure any change is stored to the changes table\r\n//\r\n  return function crudMonitor(table) {\r\n    /// <param name=\"table\" type=\"db.Table\"></param>\r\n    if (table.hook._observing) return;\r\n    table.hook._observing = true;\r\n\r\n    const tableName = table.name;\r\n    table.hook('creating').subscribe(initCreatingHook(db, table));\r\n\r\n    table.hook('updating').subscribe(initUpdatingHook(db, tableName));\r\n\r\n    table.hook('deleting').subscribe(initDeletingHook(db, tableName));\r\n  };\r\n}\r\n","import Dexie from 'dexie';\r\n\r\nexport default function initOnStorage(Observable) {\r\n  return function onStorage(event) {\r\n    // We use the onstorage event to trigger onLatestRevisionIncremented since we will wake up when other windows modify the DB as well!\r\n    if (event.key.indexOf(\"Dexie.Observable/\") === 0) { // For example \"Dexie.Observable/latestRevision/FriendsDB\"\r\n      var parts = event.key.split('/');\r\n      var prop = parts[1];\r\n      var dbname = parts[2];\r\n      if (prop === 'latestRevision') {\r\n        var rev = parseInt(event.newValue, 10);\r\n        if (!isNaN(rev) && rev > Observable.latestRevision[dbname]) {\r\n          Observable.latestRevision[dbname] = rev;\r\n          Dexie.ignoreTransaction(function () {\r\n            Observable.on('latestRevisionIncremented').fire(dbname, rev);\r\n          });\r\n        }\r\n      } else if (prop.indexOf(\"deadnode:\") === 0) {\r\n        var nodeID = parseInt(prop.split(':')[1], 10);\r\n        if (event.newValue) {\r\n          Observable.on.suicideNurseCall.fire(dbname, nodeID);\r\n        }\r\n      } else if (prop === 'intercomm') {\r\n        if (event.newValue) {\r\n          Observable.on.intercomm.fire(dbname);\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n","export default function initOverrideOpen(db, SyncNode, crudMonitor) {\r\n  return function overrideOpen(origOpen) {\r\n    return function () {\r\n      //\r\n      // Make sure to subscribe to \"creating\", \"updating\" and \"deleting\" hooks for all observable tables that were created in the stores() method.\r\n      //\r\n      Object.keys(db._allTables).forEach(tableName => {\r\n        let table = db._allTables[tableName];\r\n        if (table.schema.observable) {\r\n          crudMonitor(table);\r\n        }\r\n        if (table.name === \"_syncNodes\") {\r\n          table.mapToClass(SyncNode);\r\n        }\r\n      });\r\n      return origOpen.apply(this, arguments);\r\n    }\r\n  };\r\n}\r\n","import Dexie from 'dexie';\r\n\r\nconst Promise = Dexie.Promise;\r\n\r\nexport default function initIntercomm(db, Observable, SyncNode, mySyncNode, localStorage) {\r\n//\r\n// Intercommunication between nodes\r\n//\r\n// Enable inter-process communication between browser windows using localStorage storage event (is registered in Dexie.Observable)\r\n\r\n  var requestsWaitingForReply = {};\r\n\r\n  /**\r\n   * @param {string} type Type of message\r\n   * @param message Message to send\r\n   * @param {number} destinationNode ID of destination node\r\n   * @param {{wantReply: boolean, isFailure: boolean, requestId: number}} options If {wantReply: true}, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\r\n   */\r\n  db.observable.sendMessage = function (type, message, destinationNode, options) {\r\n    /// <param name=\"type\" type=\"String\">Type of message</param>\r\n    /// <param name=\"message\">Message to send</param>\r\n    /// <param name=\"destinationNode\" type=\"Number\">ID of destination node</param>\r\n    /// <param name=\"options\" type=\"Object\" optional=\"true\">{wantReply: Boolean, isFailure: Boolean, requestId: Number}. If wantReply, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\r\n    options = options || {};\r\n    if (!mySyncNode.node)\r\n      return options.wantReply ?\r\n          Promise.reject(new Dexie.DatabaseClosedError()) :\r\n          Promise.resolve(); // If caller doesn't want a reply, it won't catch errors either.\r\n\r\n    var msg = {message: message, destinationNode: destinationNode, sender: mySyncNode.node.id, type: type};\r\n    Dexie.extend(msg, options); // wantReply: wantReply, success: !isFailure, requestId: ...\r\n    return Dexie.ignoreTransaction(()=> {\r\n      var tables = [\"_intercomm\"];\r\n      if (options.wantReply) tables.push(\"_syncNodes\"); // If caller wants a reply, include \"_syncNodes\" in transaction to check that there's a receiver there. Otherwise, new master will get it.\r\n      var promise = db.transaction('rw', tables, () => {\r\n        if (options.wantReply) {\r\n          // Check that there is a receiver there to take the request.\r\n          return db._syncNodes.where('id').equals(destinationNode).count(receiverAlive => {\r\n            if (receiverAlive)\r\n              return db._intercomm.add(msg);\r\n            else // If we couldn't find a node -> send to master\r\n              return db._syncNodes.where('isMaster').above(0).first(function (masterNode) {\r\n                msg.destinationNode = masterNode.id;\r\n                return db._intercomm.add(msg)\r\n              });\r\n          });\r\n        } else {\r\n          // If caller doesn't need a response, we don't have to make sure that it gets one.\r\n          return db._intercomm.add(msg);\r\n        }\r\n      }).then(messageId => {\r\n        var rv = null;\r\n        if (options.wantReply) {\r\n          rv = new Promise(function (resolve, reject) {\r\n            requestsWaitingForReply[messageId.toString()] = {resolve: resolve, reject: reject};\r\n          });\r\n        }\r\n        if (localStorage) {\r\n          localStorage.setItem(\"Dexie.Observable/intercomm/\" + db.name, messageId.toString());\r\n        }\r\n        Observable.on.intercomm.fire(db.name);\r\n        return rv;\r\n      });\r\n\r\n      if (!options.wantReply) {\r\n        promise.catch(()=> {\r\n        });\r\n        return;\r\n      } else {\r\n        // Forward rejection to caller if it waits for reply.\r\n        return promise;\r\n      }\r\n    });\r\n  };\r\n\r\n  // Send a message to all local _syncNodes\r\n  db.observable.broadcastMessage = function (type, message, bIncludeSelf) {\r\n    if (!mySyncNode.node) return;\r\n    var mySyncNodeId = mySyncNode.node.id;\r\n    Dexie.ignoreTransaction(()=> {\r\n      db._syncNodes.toArray(nodes => {\r\n        return Promise.all(nodes\r\n            .filter(node => node.type === 'local' && (bIncludeSelf || node.id !== mySyncNodeId))\r\n            .map(node => db.observable.sendMessage(type, message, node.id)));\r\n      }).catch(()=> {\r\n      });\r\n    });\r\n  };\r\n\r\n  function consumeIntercommMessages() {\r\n    // Check if we got messages:\r\n    if (!mySyncNode.node) return Promise.reject(new Dexie.DatabaseClosedError());\r\n\r\n    return Dexie.ignoreTransaction(()=> {\r\n      return db.transaction('rw', '_intercomm', function() {\r\n        return db._intercomm.where({destinationNode: mySyncNode.node.id}).toArray(messages => {\r\n          messages.forEach(msg => consumeMessage(msg));\r\n          return db._intercomm.where('id').anyOf(messages.map(msg => msg.id)).delete();\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  function consumeMessage(msg) {\r\n    if (msg.type === 'response') {\r\n      // This is a response. Lookup pending request and fulfill its promise.\r\n      var request = requestsWaitingForReply[msg.requestId.toString()];\r\n      if (request) {\r\n        if (msg.isFailure) {\r\n          request.reject(msg.message.error);\r\n        } else {\r\n          request.resolve(msg.message.result);\r\n        }\r\n        delete requestsWaitingForReply[msg.requestId.toString()];\r\n      }\r\n    } else {\r\n      // This is a message or request. Fire the event and add an API for the subscriber to use if reply is requested\r\n      msg.resolve = function (result) {\r\n        db.observable.sendMessage('response', {result: result}, msg.sender, {requestId: msg.id});\r\n      };\r\n      msg.reject = function (error) {\r\n        db.observable.sendMessage('response', {error: error.toString()}, msg.sender, {isFailure: true, requestId: msg.id});\r\n      };\r\n      db.on.message.fire(msg);\r\n    }\r\n  }\r\n\r\n  // Listener for 'intercomm' events\r\n  // Gets fired when we get a 'storage' event from local storage or when sendMessage is called\r\n  // 'storage' is used to communicate between tabs (sendMessage changes the localStorage to trigger the event)\r\n  // sendMessage is used to communicate in the same tab and to trigger a storage event\r\n  function onIntercomm(dbname) {\r\n    // When storage event trigger us to check\r\n    if (dbname === db.name) {\r\n      consumeIntercommMessages().catch('DatabaseClosedError', ()=> {});\r\n    }\r\n  }\r\n\r\n  return {\r\n    onIntercomm,\r\n    consumeIntercommMessages\r\n  };\r\n}\r\n","export default function overrideParseStoresSpec(origFunc) {\r\n  return function(stores, dbSchema) {\r\n    // Create the _changes and _syncNodes tables\r\n    stores[\"_changes\"] = \"++rev\";\r\n    stores[\"_syncNodes\"] = \"++id,myRevision,lastHeartBeat,&url,isMaster,type,status\";\r\n    stores[\"_intercomm\"] = \"++id,destinationNode\";\r\n    stores[\"_uncommittedChanges\"] = \"++id,node\"; // For remote syncing when server returns a partial result.\r\n    // Call default implementation. Will populate the dbSchema structures.\r\n    origFunc.call(this, stores, dbSchema);\r\n    // Allow UUID primary keys using $$ prefix on primary key or indexes\r\n    Object.keys(dbSchema).forEach(function(tableName) {\r\n      var schema = dbSchema[tableName];\r\n      if (schema.primKey.name.indexOf('$$') === 0) {\r\n        schema.primKey.uuid = true;\r\n        schema.primKey.name = schema.primKey.name.substr(2);\r\n        schema.primKey.keyPath = schema.primKey.keyPath.substr(2);\r\n      }\r\n    });\r\n    // Now mark all observable tables\r\n    Object.keys(dbSchema).forEach(function(tableName) {\r\n      // Marked observable tables with \"observable\" in their TableSchema.\r\n      if (tableName.indexOf('_') !== 0 && tableName.indexOf('$') !== 0) {\r\n        dbSchema[tableName].observable = true;\r\n      }\r\n    });\r\n  };\r\n}\r\n","import Dexie from 'dexie';\r\n\r\nexport default function deleteOldChanges(db) {\r\n  // This is a background job and should never be done within\r\n  // a caller's transaction. Use Dexie.ignoreTransaction() to ensure that.\r\n  // We should not return the Promise but catch it ourselves instead.\r\n\r\n  // To prohibit starving the database we want to lock transactions as short as possible\r\n  // and since we're not in a hurry, we could do this job in chunks and reschedule a\r\n  // continuation every 500 ms.\r\n  const CHUNK_SIZE = 100;\r\n\r\n  Dexie.ignoreTransaction(()=>{\r\n    return db._syncNodes.orderBy(\"myRevision\").first(oldestNode => {\r\n      return db._changes\r\n          .where(\"rev\").below(oldestNode.myRevision)\r\n          .limit(CHUNK_SIZE)\r\n          .primaryKeys();\r\n    }).then(keysToDelete => {\r\n      if (keysToDelete.length === 0) return; // Done.\r\n      return db._changes.bulkDelete(keysToDelete).then(()=> {\r\n        // If not done garbage collecting, reschedule a continuation of it until done.\r\n        if (keysToDelete.length === CHUNK_SIZE) {\r\n          // Limit reached. Changes are there are more job to do. Schedule again:\r\n          setTimeout(() => db.isOpen() && deleteOldChanges(db), 500);\r\n        }\r\n      });\r\n    });\r\n  }).catch(()=>{\r\n    // The operation is not crucial. A failure could almost only be due to that database has been closed.\r\n    // No need to log this.\r\n  });\r\n}\r\n","/* ========================================================================== \r\n *                           dexie-observable.js\r\n * ==========================================================================\r\n *\r\n * Dexie addon for observing database changes not just on local db instance\r\n * but also on other instances, tabs and windows.\r\n *\r\n * Comprises a base framework for dexie-syncable.js\r\n *\r\n * By David Fahlander, david.fahlander@gmail.com,\r\n *    Nikolas Poniros, https://github.com/nponiros\r\n *\r\n * ==========================================================================\r\n *\r\n * Version {version}, {date}\r\n *\r\n * http://dexie.org\r\n *\r\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n * \r\n */\r\nimport Dexie from 'dexie';\r\nimport { nop, promisableChain, createUUID } from './utils';\r\n\r\nimport initOverrideCreateTransaction from './override-create-transaction';\r\nimport initWakeupObservers from './wakeup-observers';\r\nimport initCrudMonitor from './hooks/crud-monitor';\r\nimport initOnStorage from './on-storage';\r\nimport initOverrideOpen from './override-open';\r\nimport initIntercomm from './intercomm';\r\n\r\nimport overrideParseStoresSpec from './override-parse-stores-spec';\r\n\r\nimport deleteOldChanges from './delete-old-changes';\r\n\r\nvar global = self;\r\n\r\n/** class DatabaseChange\r\n    *\r\n    *  Object contained by the _changes table.\r\n    */\r\nvar DatabaseChange = Dexie.defineClass({\r\n    rev: Number, // Auto-incremented primary key\r\n    source: String, // Optional source creating the change. Set if transaction.source was set when doing the operation.\r\n    table: String, // Table name\r\n    key: Object, // Primary key. Any type.\r\n    type: Number, // 1 = CREATE, 2 = UPDATE, 3 = DELETE\r\n    obj: Object, // CREATE: obj contains the object created.\r\n    mods: Object, // UPDATE: mods contains the modifications made to the object.\r\n    oldObj: Object // DELETE: oldObj contains the object deleted. UPDATE: oldObj contains the old object before updates applied.\r\n});\r\n\r\n// Import some usable helper functions\r\nvar override = Dexie.override;\r\nvar Promise = Dexie.Promise;\r\nvar browserIsShuttingDown = false;\r\n\r\nexport default function Observable(db) {\r\n    /// <summary>\r\n    ///   Extension to Dexie providing Syncronization capabilities to Dexie.\r\n    /// </summary>\r\n    /// <param name=\"db\" type=\"Dexie\"></param>\r\n\r\n    var NODE_TIMEOUT = 20000, // 20 seconds before local db instances are timed out. This is so that old changes can be deleted when not needed and to garbage collect old _syncNodes objects.\r\n        HIBERNATE_GRACE_PERIOD = 20000, // 20 seconds\r\n        // LOCAL_POLL: The time to wait before polling local db for changes and cleaning up old nodes. \r\n        // Polling for changes is a fallback only needed in certain circomstances (when the onstorage event doesnt reach all listeners - when different browser windows doesnt share the same process)\r\n        LOCAL_POLL = 500, // 500 ms. In real-world there will be this value + the time it takes to poll(). A small value is needed in Workers where we cannot rely on storage event.\r\n        HEARTBEAT_INTERVAL = NODE_TIMEOUT - 5000;\r\n\r\n    var localStorage = Observable.localStorageImpl;\r\n\r\n    /** class SyncNode\r\n        *\r\n        * Object contained in the _syncNodes table.\r\n        */\r\n    var SyncNode = Dexie.defineClass({\r\n        //id: Number,\r\n        myRevision: Number,\r\n        type: String, // \"local\" or \"remote\"\r\n        lastHeartBeat: Number,\r\n        deleteTimeStamp: Number, // In case lastHeartBeat is too old, a value of now + HIBERNATE_GRACE_PERIOD will be set here. If reached before node wakes up, node will be deleted.\r\n        url: String, // Only applicable for \"remote\" nodes. Only used in Dexie.Syncable.\r\n        isMaster: Number, // 1 if true. Not using Boolean because it's not possible to index Booleans in IE implementation of IDB.\r\n\r\n        // Below properties should be extended in Dexie.Syncable. Not here. They apply to remote nodes only (type == \"remote\"):\r\n        syncProtocol: String, // Tells which implementation of ISyncProtocol to use for remote syncing. \r\n        syncContext: null,\r\n        syncOptions: Object,\r\n        connected: false, // FIXTHIS: Remove! Replace with status.\r\n        status: Number,\r\n        appliedRemoteRevision: null,\r\n        remoteBaseRevisions: [{ local: Number, remote: null }],\r\n        dbUploadState: {\r\n            tablesToUpload: [String],\r\n            currentTable: String,\r\n            currentKey: null,\r\n            localBaseRevision: Number\r\n        }\r\n    });\r\n\r\n    db.observable = {};\r\n    db.observable.SyncNode = SyncNode;\r\n\r\n    const wakeupObservers = initWakeupObservers(db, Observable, localStorage);\r\n    const overrideCreateTransaction = initOverrideCreateTransaction(db, wakeupObservers);\r\n    const crudMonitor = initCrudMonitor(db);\r\n    const overrideOpen = initOverrideOpen(db, SyncNode, crudMonitor);\r\n\r\n    var mySyncNode = {node: null};\r\n\r\n    const intercomm = initIntercomm(db, Observable, SyncNode, mySyncNode, localStorage);\r\n    const onIntercomm = intercomm.onIntercomm;\r\n    const consumeIntercommMessages = intercomm.consumeIntercommMessages;\r\n\r\n    // Allow other addons to access the local sync node. May be needed by Dexie.Syncable.\r\n    Object.defineProperty(db, \"_localSyncNode\", {\r\n        get: function() { return mySyncNode.node; }\r\n    });\r\n\r\n    var pollHandle = null,\r\n        heartbeatHandle = null;\r\n\r\n    if (Dexie.fake) {\r\n        // This code will never run.\r\n        // It's here just to enable auto-complete in visual studio - helps a lot when writing code.\r\n        db.version(1).stores({\r\n            _syncNodes: \"++id,myRevision,lastHeartBeat\",\r\n            _changes: \"++rev\",\r\n            _intercomm: \"++id,destinationNode\",\r\n            _uncommittedChanges: \"++id,node\"\r\n        });\r\n        db._syncNodes.mapToClass(SyncNode);\r\n        db._changes.mapToClass(DatabaseChange);\r\n        mySyncNode.node = new SyncNode({\r\n            myRevision: 0,\r\n            type: \"local\",\r\n            lastHeartBeat: Date.now(),\r\n            deleteTimeStamp: null\r\n        });\r\n    }\r\n\r\n    //\r\n    // Override parsing the stores to add \"_changes\" and \"_syncNodes\" tables.\r\n    // It also adds UUID support for the primary key and sets tables as observable tables.\r\n    //\r\n    db.Version.prototype._parseStoresSpec = override(db.Version.prototype._parseStoresSpec, overrideParseStoresSpec);\r\n\r\n    // changes event on db:\r\n    db.on.addEventType({\r\n        changes: 'asap',\r\n        cleanup: [promisableChain, nop], // fire (nodesTable, changesTable, trans). Hook called when cleaning up nodes. Subscribers may return a Promise to to more stuff. May do additional stuff if local sync node is master.\r\n        message: 'asap'\r\n    });\r\n\r\n    //\r\n    // Override transaction creation to always include the \"_changes\" store when any observable store is involved.\r\n    //\r\n    db._createTransaction = override(db._createTransaction, overrideCreateTransaction);\r\n\r\n    // If Observable.latestRevsion[db.name] is undefined, set it to 0 so that comparing against it always works.\r\n    // You might think that it will always be undefined before this call, but in case another Dexie instance in the same\r\n    // window with the same database name has been created already, this static property will already be set correctly.\r\n    Observable.latestRevision[db.name] = Observable.latestRevision[db.name] || 0;\r\n\r\n    //\r\n    // Override open to setup hooks for db changes and map the _syncNodes table to class\r\n    //\r\n    db.open = override(db.open, overrideOpen);\r\n\r\n    db.close = override(db.close, function(origClose) {\r\n        return function () {\r\n            if (db.dynamicallyOpened()) return origClose.apply(this, arguments); // Don't observe dynamically opened databases.\r\n            // Teardown our framework.\r\n            if (wakeupObservers.timeoutHandle) {\r\n                clearTimeout(wakeupObservers.timeoutHandle);\r\n                delete wakeupObservers.timeoutHandle;\r\n            }\r\n            Observable.on('latestRevisionIncremented').unsubscribe(onLatestRevisionIncremented);\r\n            Observable.on('suicideNurseCall').unsubscribe(onSuicide);\r\n            Observable.on('intercomm').unsubscribe(onIntercomm);\r\n            Observable.on('beforeunload').unsubscribe(onBeforeUnload);\r\n            // Inform other db instances in same window that we are dying:\r\n            if (mySyncNode.node && mySyncNode.node.id) {\r\n                Observable.on.suicideNurseCall.fire(db.name, mySyncNode.node.id);\r\n                // Inform other windows as well:\r\n                if (localStorage) {\r\n                    localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.node.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. cleanup() may trigger twice per other db instance. But that doesnt to anything.\r\n                }\r\n                mySyncNode.node.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\r\n                mySyncNode.node.lastHeartBeat = 0;\r\n                db._syncNodes.put(mySyncNode.node); // This async operation may be cancelled since the browser is closing down now.\r\n                mySyncNode.node = null;\r\n            }\r\n\r\n            if (pollHandle) clearTimeout(pollHandle);\r\n            pollHandle = null;\r\n            if (heartbeatHandle) clearTimeout(heartbeatHandle);\r\n            heartbeatHandle = null;\r\n            return origClose.apply(this, arguments);\r\n        };\r\n    });\r\n\r\n    // Override Dexie.delete() in order to delete Observable.latestRevision[db.name].\r\n    db.delete = override(db.delete, function(origDelete) {\r\n        return function() {\r\n            return origDelete.apply(this, arguments).then(function(result) {\r\n                // Reset Observable.latestRevision[db.name]\r\n                Observable.latestRevision[db.name] = 0;\r\n                return result;\r\n            });\r\n        };\r\n    });\r\n\r\n    // When db opens, make sure to start monitor any changes before other db operations will start.\r\n    db.on(\"ready\", function startObserving() {\r\n        if (db.dynamicallyOpened()) return db; // Don't observe dynamically opened databases.\r\n        \r\n        return db.table(\"_changes\").orderBy(\"rev\").last(function(lastChange) {\r\n            // Since startObserving() is called before database open() method, this will be the first database operation enqueued to db.\r\n            // Therefore we know that the retrieved value will be This query will\r\n            var latestRevision = (lastChange ? lastChange.rev : 0);\r\n            mySyncNode.node = new SyncNode({\r\n                myRevision: latestRevision,\r\n                type: \"local\",\r\n                lastHeartBeat: Date.now(),\r\n                deleteTimeStamp: null,\r\n                isMaster: 0\r\n            });\r\n            if (Observable.latestRevision[db.name] < latestRevision) {\r\n                // Side track . For correctness whenever setting Observable.latestRevision[db.name] we must make sure the event is fired if increased:\r\n                // There are other db instances in same window that hasnt yet been informed about a new revision\r\n                Observable.latestRevision[db.name] = latestRevision;\r\n                Dexie.ignoreTransaction(function() {\r\n                    Observable.on.latestRevisionIncremented.fire(latestRevision);\r\n                });\r\n            }\r\n            // Add new sync node or if this is a reopening of the database after a close() call, update it.\r\n            return db.transaction('rw', '_syncNodes', () => {\r\n                return db._syncNodes\r\n                    .where('isMaster').equals(1)\r\n                    .first(currentMaster => {\r\n                        if (!currentMaster) {\r\n                            // There's no master. We must be the master\r\n                            mySyncNode.node.isMaster = 1;\r\n                        } else if (currentMaster.lastHeartBeat < Date.now() - NODE_TIMEOUT) {\r\n                            // Master have been inactive for too long\r\n                            // Take over mastership\r\n                            mySyncNode.node.isMaster = 1;\r\n                            currentMaster.isMaster = 0;\r\n                            return db._syncNodes.put(currentMaster);\r\n                        }\r\n                    }).then(()=>{\r\n                        // Add our node to DB and start subscribing to events\r\n                        return db._syncNodes.add(mySyncNode.node).then(function() {\r\n                            Observable.on('latestRevisionIncremented', onLatestRevisionIncremented); // Wakeup when a new revision is available.\r\n                            Observable.on('beforeunload', onBeforeUnload);\r\n                            Observable.on('suicideNurseCall', onSuicide);\r\n                            Observable.on('intercomm', onIntercomm);\r\n                            // Start polling for changes and do cleanups:\r\n                            pollHandle = setTimeout(poll, LOCAL_POLL);\r\n                            // Start heartbeat\r\n                            heartbeatHandle = setTimeout(heartbeat, HEARTBEAT_INTERVAL);\r\n                        });\r\n                });\r\n            }).then(function () {\r\n                cleanup();\r\n            });\r\n        });\r\n    }, true); // True means the on(ready) event will survive a db reopening (db.close() / db.open()).\r\n\r\n    var handledRevision = 0;\r\n\r\n    function onLatestRevisionIncremented(dbname, latestRevision) {\r\n        if (dbname === db.name) {\r\n            if (handledRevision >= latestRevision) return; // Make sure to only run once per revision. (Workaround for IE triggering storage event on same window)\r\n            handledRevision = latestRevision;\r\n            Dexie.vip(function() {\r\n                readChanges(latestRevision).catch('DatabaseClosedError', ()=>{\r\n                    // Handle database closed error gracefully while reading changes.\r\n                    // Don't trigger 'unhandledrejection'.\r\n                    // Even though we intercept the close() method, it might be called when in the middle of\r\n                    // reading changes and then that flow will cancel with DatabaseClosedError.\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    function readChanges(latestRevision, recursion, wasPartial) {\r\n        // Whenever changes are read, fire db.on(\"changes\") with the array of changes. Eventually, limit the array to 1000 entries or so (an entire database is\r\n        // downloaded from server AFTER we are initiated. For example, if first sync call fails, then after a while we get reconnected. However, that scenario\r\n        // should be handled in case database is totally empty we should fail if sync is not available)\r\n        if (!recursion && readChanges.ongoingOperation) {\r\n            // We are already reading changes. Prohibit a parallell execution of this which would lead to duplicate trigging of 'changes' event.\r\n            // Instead, the callback in toArray() will always check Observable.latestRevision[db.name] to see if it has changed and if so, re-launch readChanges().\r\n            // The caller should get the Promise instance from the ongoing operation so that the then() method will resolve when operation is finished.\r\n            return readChanges.ongoingOperation;\r\n        }\r\n\r\n        var partial = false;\r\n        var ourSyncNode = mySyncNode.node; // Because mySyncNode can suddenly be set to null on database close, and worse, can be set to a new value if database is reopened.\r\n        if (!ourSyncNode) {\r\n            return Promise.reject(new Dexie.DatabaseClosedError());\r\n        }\r\n        var LIMIT = 1000;\r\n        var promise = db._changes.where(\"rev\").above(ourSyncNode.myRevision).limit(LIMIT).toArray(function (changes) {\r\n            if (changes.length > 0) {\r\n                var lastChange = changes[changes.length - 1];\r\n                partial = (changes.length === LIMIT);\r\n                db.on('changes').fire(changes, partial);\r\n                ourSyncNode.myRevision = lastChange.rev;\r\n            } else if (wasPartial) {\r\n                // No more changes, BUT since we have triggered on('changes') with partial = true,\r\n                // we HAVE TO trigger changes again with empty list and partial = false\r\n                db.on('changes').fire([], false);\r\n            }\r\n\r\n            let ourNodeStillExists = false;\r\n            return db._syncNodes.where(':id').equals(ourSyncNode.id).modify(syncNode => {\r\n                ourNodeStillExists = true;\r\n                syncNode.lastHeartBeat = Date.now(); // Update heart beat (not nescessary, but why not!)\r\n                syncNode.deleteTimeStamp = null; // Reset \"deleteTimeStamp\" flag if it was there.\r\n                syncNode.myRevision = Math.max(syncNode.myRevision, ourSyncNode.myRevision);\r\n            }).then(()=>ourNodeStillExists);\r\n        }).then(ourNodeStillExists =>{\r\n            if (!ourNodeStillExists) {\r\n                // My node has been deleted. We must have been lazy and got removed by another node.\r\n                if (browserIsShuttingDown) {\r\n                    throw new Error(\"Browser is shutting down\");\r\n                } else {\r\n                    db.close();\r\n                    console.error(\"Out of sync\"); // TODO: What to do? Reload the page?\r\n                    if (global.location) global.location.reload(true);\r\n                    throw new Error(\"Out of sync\"); // Will make current promise reject\r\n                }\r\n            }\r\n\r\n            // Check if more changes have come since we started reading changes in the first place. If so, relaunch readChanges and let the ongoing promise not\r\n            // resolve until all changes have been read.\r\n            if (partial || Observable.latestRevision[db.name] > ourSyncNode.myRevision) {\r\n                // Either there were more than 1000 changes or additional changes where added while we were reading these changes,\r\n                // In either case, call readChanges() again until we're done.\r\n                return readChanges(Observable.latestRevision[db.name], (recursion || 0) + 1, partial);\r\n            }\r\n\r\n        }).finally(function() {\r\n            delete readChanges.ongoingOperation;\r\n        });\r\n\r\n        if (!recursion) {\r\n            readChanges.ongoingOperation = promise;\r\n        }\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * The reason we need heartbeat in parallell with poll() is due to the risk of long-running\r\n     * transactions while syncing changes from server to client in Dexie.Syncable. That transaction will\r\n     * include _changes (which will block readChanges()) but not _syncNodes. So this heartbeat will go on\r\n     * during that changes are being applied and update our lastHeartBeat property while poll() is waiting.\r\n     * When cleanup() (who also is blocked by the sync) wakes up, it won't kill the master node because this\r\n     * heartbeat job will have updated the master node's heartbeat during the long-running sync transaction.\r\n     * \r\n     * If we did not have this heartbeat, and a server send lots of changes that took more than NODE_TIMEOUT\r\n     * (20 seconds), another node waking up after the sync would kill the master node and take over because\r\n     * it would believe it was dead.\r\n     */\r\n    function heartbeat() {\r\n        heartbeatHandle = null;\r\n        var currentInstance = mySyncNode.node && mySyncNode.node.id;\r\n        if (!currentInstance) return;\r\n        db.transaction('rw!', db._syncNodes, ()=>{\r\n            db._syncNodes.where({id: currentInstance}).first(ourSyncNode => {\r\n                if (!ourSyncNode) {\r\n                    // We do not exist anymore. Call db.close() to teardown polls etc.\r\n                    if (db.isOpen()) db.close();\r\n                    return;\r\n                }\r\n                ourSyncNode.lastHeartBeat = Date.now();\r\n                ourSyncNode.deleteTimeStamp = null; // Reset \"deleteTimeStamp\" flag if it was there.\r\n                return db._syncNodes.put(ourSyncNode);\r\n            });\r\n        }).catch('DatabaseClosedError', () => {\r\n            // Ignore silently\r\n        }).finally(() => {\r\n            if (mySyncNode.node && mySyncNode.node.id === currentInstance && db.isOpen()) {\r\n                heartbeatHandle = setTimeout(heartbeat, HEARTBEAT_INTERVAL);\r\n            }\r\n        });\r\n    }\r\n\r\n    function poll() {\r\n        pollHandle = null;\r\n        var currentInstance = mySyncNode.node && mySyncNode.node.id;\r\n        if (!currentInstance) return;\r\n        Dexie.vip(function() { // VIP ourselves. Otherwise we might not be able to consume intercomm messages from master node before database has finished opening. This would make DB stall forever. Cannot rely on storage-event since it may not always work in some browsers of different processes.\r\n            readChanges(Observable.latestRevision[db.name]).then(cleanup).then(consumeIntercommMessages)\r\n            .catch('DatabaseClosedError', ()=>{\r\n                // Handle database closed error gracefully while reading changes.\r\n                // Don't trigger 'unhandledrejection'.\r\n                // Even though we intercept the close() method, it might be called when in the middle of\r\n                // reading changes and then that flow will cancel with DatabaseClosedError.\r\n            })\r\n            .finally(function() {\r\n                // Poll again in given interval:\r\n                if (mySyncNode.node && mySyncNode.node.id === currentInstance && db.isOpen()) {\r\n                    pollHandle = setTimeout(poll, LOCAL_POLL);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    \r\n    function cleanup() {\r\n        var ourSyncNode = mySyncNode.node;\r\n        if (!ourSyncNode) return Promise.reject(new Dexie.DatabaseClosedError());\r\n        return db.transaction('rw', '_syncNodes', '_changes', '_intercomm', function() {\r\n            // Cleanup dead local nodes that has no heartbeat for over a minute\r\n            // Dont do the following:\r\n            //nodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).and(function (node) { return node.type == \"local\"; }).delete();\r\n            // Because client may have been in hybernate mode and recently woken up. That would lead to deletion of all nodes.\r\n            // Instead, we should mark any old nodes for deletion in a minute or so. If they still dont wakeup after that minute we could consider them dead.\r\n            var weBecameMaster = false;\r\n            db._syncNodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).filter(node => node.type === 'local').modify(function(node) {\r\n                if (node.deleteTimeStamp && node.deleteTimeStamp < Date.now()) {\r\n                    // Delete the node.\r\n                    delete this.value;\r\n                    // Cleanup localStorage \"deadnode:\" entry for this node (localStorage API was used to wakeup other windows (onstorage event) - an event type missing in indexedDB.)\r\n                    if (localStorage) {\r\n                        localStorage.removeItem('Dexie.Observable/deadnode:' + node.id + '/' + db.name);\r\n                    }\r\n                    // Check if we are deleting a master node\r\n                    if (node.isMaster) {\r\n                        // The node we are deleting is master. We must take over that role.\r\n                        // OK to call nodes.update(). No need to call Dexie.vip() because nodes is opened in existing transaction!\r\n                        db._syncNodes.update(ourSyncNode, { isMaster: 1 });\r\n                        weBecameMaster = true;\r\n                    }\r\n                    // Cleanup intercomm messages destinated to the node being deleted.\r\n                    // Those that waits for reply should be redirected to us.\r\n                    db._intercomm.where({destinationNode: node.id}).modify(function(msg) {\r\n                        if (msg.wantReply)\r\n                            msg.destinationNode = ourSyncNode.id;\r\n                        else\r\n                            // Delete the message from DB and if someone is waiting for reply, let ourselved answer the request.\r\n                            delete this.value;\r\n                    });\r\n                } else if (!node.deleteTimeStamp) {\r\n                    // Mark the node for deletion\r\n                    node.deleteTimeStamp = Date.now() + HIBERNATE_GRACE_PERIOD;\r\n                }\r\n            }).then(function() {\r\n                // Cleanup old revisions that no node is interested of.\r\n                Observable.deleteOldChanges(db);\r\n                return db.on(\"cleanup\").fire(weBecameMaster);\r\n            });\r\n        });\r\n    }\r\n\r\n    function onBeforeUnload() {\r\n        // Mark our own sync node for deletion.\r\n        if (!mySyncNode.node) return;\r\n        browserIsShuttingDown = true;\r\n        mySyncNode.node.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\r\n        mySyncNode.node.lastHeartBeat = 0;\r\n        db._syncNodes.put(mySyncNode.node); // This async operation may be cancelled since the browser is closing down now.\r\n        Observable.wereTheOneDying = true; // If other nodes in same window wakes up by this call, make sure they dont start taking over mastership and stuff...\r\n        // Inform other windows that we're gone, so that they may take over our role if needed. Setting localStorage item below will trigger Observable.onStorage, which will trigger onSuicie() below:\r\n        if (localStorage) {\r\n            localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.node.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. However, that is doublechecked in nursecall subscriber below.\r\n        }\r\n    }\r\n\r\n    function onSuicide(dbname, nodeID) {\r\n        if (dbname === db.name && !Observable.wereTheOneDying) {\r\n            // Make sure it's dead indeed. Second bullet. Why? Because it has marked itself for deletion in the onbeforeunload event, which is fired just before window dies.\r\n            // It's own call to put() may have been cancelled.\r\n            // Note also that in IE, this event may be called twice, but that doesnt harm!\r\n            Dexie.vip(function() {\r\n                db._syncNodes.update(nodeID, { deleteTimeStamp: 1, lastHeartBeat: 0 }).then(cleanup);\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\n//\r\n// Static properties and methods\r\n// \r\n\r\nObservable.latestRevision = {}; // Latest revision PER DATABASE. Example: Observable.latestRevision.FriendsDB = 37;\r\nObservable.on = Dexie.Events(null, \"latestRevisionIncremented\", \"suicideNurseCall\", \"intercomm\", \"beforeunload\"); // fire(dbname, value);\r\nObservable.createUUID = createUUID;\r\n\r\nObservable.deleteOldChanges = deleteOldChanges;\r\n\r\nObservable._onStorage = initOnStorage(Observable);\r\n\r\nObservable._onBeforeUnload = function() {\r\n    Observable.on.beforeunload.fire();\r\n};\r\n\r\ntry {\r\n    Observable.localStorageImpl = global.localStorage;\r\n} catch (ex){}\r\n\r\n//\r\n// Map window events to static events in Dexie.Observable:\r\n//\r\nif (global.addEventListener) {\r\n    global.addEventListener(\"storage\", Observable._onStorage);\r\n    global.addEventListener(\"beforeunload\", Observable._onBeforeUnload);\r\n}\r\n// Register addon:\r\nDexie.Observable = Observable;\r\nDexie.addons.push(Observable);\r\n"],"names":["Promise"],"mappings":"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"}